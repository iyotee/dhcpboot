#!/usr/bin/env python3
"""
DHCP Monitor GUI - Version avec gestion avanc√©e des permissions
Surveillance DHCP avec interface graphique moderne et gestion des privil√®ges
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import queue
import re
import subprocess
import sys
import os
import platform
from datetime import datetime

# Import conditionnel de Scapy avec gestion d'erreur
try:
    from scapy.all import sniff, DHCP, IP, Ether, UDP, conf, get_if_list
    SCAPY_AVAILABLE = True
except ImportError:
    SCAPY_AVAILABLE = False

class PermissionManager:
    """Gestionnaire de permissions pour la capture r√©seau"""
    
    @staticmethod
    def is_admin():
        """V√©rifier si l'application s'ex√©cute avec des privil√®ges administrateur"""
        try:
            if platform.system() == "Windows":
                import ctypes
                return ctypes.windll.shell32.IsUserAnAdmin()
            else:
                return os.geteuid() == 0
        except:
            return False
    
    @staticmethod
    def restart_as_admin():
        """Red√©marrer l'application avec des privil√®ges administrateur"""
        try:
            if platform.system() == "Windows":
                import ctypes
                ctypes.windll.shell32.ShellExecuteW(
                    None, "runas", sys.executable, " ".join(sys.argv), None, 1
                )
            else:
                # Linux/Mac - utiliser sudo
                subprocess.call(['sudo', sys.executable] + sys.argv)
            sys.exit(0)
        except Exception as e:
            return False, str(e)
        return True, ""
    
    @staticmethod
    def setup_linux_permissions():
        """Configuration des permissions pour Linux"""
        try:
            # V√©rifier si setcap est disponible
            result = subprocess.run(['which', 'setcap'], capture_output=True)
            if result.returncode != 0:
                return False, "setcap n'est pas disponible"
            
            # Obtenir le chemin de l'interpr√©teur Python
            python_path = sys.executable
            
            # Ajouter les capacit√©s CAP_NET_RAW et CAP_NET_ADMIN
            cmd = ['sudo', 'setcap', 'cap_net_raw,cap_net_admin+eip', python_path]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                return True, "Permissions configur√©es avec succ√®s"
            else:
                return False, result.stderr
                
        except Exception as e:
            return False, str(e)
    
    @staticmethod
    def check_raw_socket_permission():
        """Tester si les raw sockets sont accessibles"""
        try:
            import socket
            s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
            s.close()
            return True
        except PermissionError:
            return False
        except Exception:
            return True  # Autres erreurs ne sont pas li√©es aux permissions

class DHCPMonitorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üîç DHCP Monitor - Option 50 Tracker")
        self.root.geometry("1000x700")
        self.root.configure(bg='#2b2b2b')
        
        # Variables de contr√¥le
        self.is_monitoring = False
        self.sniff_thread = None
        self.message_queue = queue.Queue()
        self.gateway_ip = tk.StringVar()
        self.selected_interface = tk.StringVar()
        self.permission_manager = PermissionManager()
        
        # Cr√©er l'interface
        self.create_widgets()
        self.setup_styles()
        
        # V√©rifier les permissions et Scapy
        self.check_environment()
        
        # D√©marrer la v√©rification de la queue
        self.check_queue()
    
    def check_environment(self):
        """V√©rifier l'environnement et les permissions"""
        if not SCAPY_AVAILABLE:
            self.log_message("‚ùå ERREUR: Scapy n'est pas install√©!", "error")
            self.log_message("üí° Installez avec: pip install scapy", "info")
            self.start_button.config(state="disabled")
            return
        
        # V√©rifier les permissions
        if not self.permission_manager.is_admin():
            self.log_message("‚ö†Ô∏è ATTENTION: Privil√®ges administrateur requis", "warning")
            self.show_permission_dialog()
        else:
            self.log_message("‚úÖ Privil√®ges administrateur d√©tect√©s", "success")
            self.load_interfaces()
            
            # Test suppl√©mentaire pour les raw sockets
            if not self.permission_manager.check_raw_socket_permission():
                self.log_message("‚ö†Ô∏è Probl√®me d'acc√®s aux raw sockets", "warning")
                if platform.system() == "Linux":
                    self.suggest_linux_setup()
    
    def show_permission_dialog(self):
        """Afficher une bo√Æte de dialogue pour les permissions"""
        system = platform.system()
        
        if system == "Windows":
            msg = """Cette application n√©cessite des privil√®ges administrateur pour capturer le trafic r√©seau.

Options:
1. Red√©marrer en tant qu'administrateur (recommand√©)
2. Continuer sans privil√®ges (fonctionnalit√© limit√©e)

Souhaitez-vous red√©marrer avec des privil√®ges administrateur?"""
        else:
            msg = """Cette application n√©cessite des privil√®ges root pour capturer le trafic r√©seau.

Options:
1. Red√©marrer avec sudo (recommand√©)
2. Configurer les permissions avec setcap
3. Continuer sans privil√®ges (fonctionnalit√© limit√©e)

Souhaitez-vous red√©marrer avec sudo?"""
        
        result = messagebox.askyesnocancel("Privil√®ges requis", msg)
        
        if result is True:  # Oui - red√©marrer
            success, error = self.permission_manager.restart_as_admin()
            if not success:
                messagebox.showerror("Erreur", f"Impossible de red√©marrer: {error}")
        elif result is False and system == "Linux":  # Non sur Linux - proposer setcap
            self.suggest_linux_setup()
        # None = Annuler - continuer sans privil√®ges
    
    def suggest_linux_setup(self):
        """Proposer la configuration Linux avec setcap"""
        msg = """Alternative pour Linux: Configurer les permissions avec setcap

Cette commande donne les permissions n√©cessaires √† Python:
sudo setcap cap_net_raw,cap_net_admin+eip /usr/bin/python3

Souhaitez-vous que l'application tente de configurer cela automatiquement?"""
        
        if messagebox.askyesno("Configuration Linux", msg):
            success, message = self.permission_manager.setup_linux_permissions()
            if success:
                messagebox.showinfo("Succ√®s", message + "\nVeuillez red√©marrer l'application.")
            else:
                messagebox.showerror("Erreur", f"√âchec de la configuration: {message}")
    
    def setup_styles(self):
        """Configure les styles de l'interface"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Style pour les boutons
        style.configure('Start.TButton', 
                       background='#4CAF50', 
                       foreground='white',
                       font=('Arial', 10, 'bold'))
        style.configure('Stop.TButton', 
                       background='#f44336', 
                       foreground='white',
                       font=('Arial', 10, 'bold'))
        style.configure('Admin.TButton', 
                       background='#FF9800', 
                       foreground='white',
                       font=('Arial', 9, 'bold'))
    
    def create_widgets(self):
        """Cr√©er tous les widgets de l'interface"""
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configuration de la grille
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(5, weight=1)
        
        # Titre avec indicateur de permissions
        title_frame = ttk.Frame(main_frame)
        title_frame.grid(row=0, column=0, columnspan=3, pady=(0, 10))
        
        title_label = tk.Label(title_frame, 
                              text="üîç DHCP Monitor - Option 50 Tracker",
                              font=('Arial', 16, 'bold'),
                              bg='#2b2b2b', fg='#ffffff')
        title_label.grid(row=0, column=0)
        
        # Indicateur de permissions
        self.permission_label = tk.Label(title_frame, 
                                       text="üîí V√©rification...",
                                       font=('Arial', 10),
                                       bg='#2b2b2b', fg='#ffaa00')
        self.permission_label.grid(row=1, column=0, pady=(5, 0))
        
        # Bouton pour red√©marrer avec privil√®ges
        self.admin_button = ttk.Button(title_frame, text="üîë Red√©marrer en Admin", 
                                      command=self.restart_with_privileges,
                                      style='Admin.TButton')
        self.admin_button.grid(row=1, column=1, padx=(20, 0), pady=(5, 0))
        
        # Frame de configuration
        config_frame = ttk.LabelFrame(main_frame, text="Configuration", padding="10")
        config_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        config_frame.columnconfigure(1, weight=1)
        
        # Interface r√©seau
        ttk.Label(config_frame, text="Interface r√©seau:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.interface_combo = ttk.Combobox(config_frame, textvariable=self.selected_interface, 
                                           state="readonly", width=30)
        self.interface_combo.grid(row=0, column=1, sticky=(tk.W, tk.E))
        
        # Bouton pour recharger les interfaces
        self.refresh_button = ttk.Button(config_frame, text="üîÑ", 
                                       command=self.load_interfaces, width=3)
        self.refresh_button.grid(row=0, column=2, padx=(5, 0))
        
        # Gateway IP
        ttk.Label(config_frame, text="Gateway IP:").grid(row=1, column=0, sticky=tk.W, padx=(0, 10), pady=(10, 0))
        self.gateway_entry = ttk.Entry(config_frame, textvariable=self.gateway_ip, width=30)
        self.gateway_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=(10, 0))
        self.gateway_entry.insert(0, "192.168.1.1")
        
        # Bouton de validation IP
        self.validate_button = ttk.Button(config_frame, text="Valider IP", 
                                         command=self.validate_gateway_ip)
        self.validate_button.grid(row=1, column=2, padx=(5, 0), pady=(10, 0))
        
        # Frame de contr√¥le
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=2, column=0, columnspan=3, pady=10)
        
        # Boutons de contr√¥le
        self.start_button = ttk.Button(control_frame, text="üöÄ D√©marrer la capture", 
                                      command=self.start_monitoring, style='Start.TButton')
        self.start_button.grid(row=0, column=0, padx=5)
        
        self.stop_button = ttk.Button(control_frame, text="üõë Arr√™ter", 
                                     command=self.stop_monitoring, style='Stop.TButton',
                                     state="disabled")
        self.stop_button.grid(row=0, column=1, padx=5)
        
        self.clear_button = ttk.Button(control_frame, text="üóëÔ∏è Effacer les logs", 
                                      command=self.clear_logs)
        self.clear_button.grid(row=0, column=2, padx=5)
        
        # Test de permissions
        self.test_button = ttk.Button(control_frame, text="üß™ Tester permissions", 
                                     command=self.test_permissions)
        self.test_button.grid(row=0, column=3, padx=5)
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("‚èπÔ∏è Arr√™t√© - V√©rification des permissions...")
        status_label = ttk.Label(main_frame, textvariable=self.status_var, 
                                relief=tk.SUNKEN, anchor=tk.W)
        status_label.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 5))
        
        # Frame des logs avec onglets
        log_frame = ttk.LabelFrame(main_frame, text="Logs de capture", padding="5")
        log_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # Notebook pour les onglets
        self.notebook = ttk.Notebook(log_frame)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Onglet "Tous les logs"
        all_frame = ttk.Frame(self.notebook)
        self.notebook.add(all_frame, text="üìã Tous les logs")
        
        self.log_text = scrolledtext.ScrolledText(all_frame, height=20, 
                                                 bg='#1e1e1e', fg='#ffffff',
                                                 font=('Consolas', 9))
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        all_frame.columnconfigure(0, weight=1)
        all_frame.rowconfigure(0, weight=1)
        
        # Onglet "Option 50 uniquement"
        option50_frame = ttk.Frame(self.notebook)
        self.notebook.add(option50_frame, text="üéØ Option 50")
        
        self.option50_text = scrolledtext.ScrolledText(option50_frame, height=20,
                                                      bg='#1e1e1e', fg='#00ff00',
                                                      font=('Consolas', 9))
        self.option50_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        option50_frame.columnconfigure(0, weight=1)
        option50_frame.rowconfigure(0, weight=1)
        
        # Onglet "Statistiques"
        stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(stats_frame, text="üìä Statistiques")
        
        self.stats_text = scrolledtext.ScrolledText(stats_frame, height=20,
                                                   bg='#1e1e1e', fg='#ffff00',
                                                   font=('Consolas', 9))
        self.stats_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        stats_frame.columnconfigure(0, weight=1)
        stats_frame.rowconfigure(0, weight=1)
        
        # Initialiser les statistiques
        self.stats = {
            'total_packets': 0,
            'option50_packets': 0,
            'dhcp_types': {},
            'gateway_packets': 0
        }
        
        # Mettre √† jour l'indicateur de permissions
        self.update_permission_indicator()
    
    def update_permission_indicator(self):
        """Mettre √† jour l'indicateur de permissions"""
        if self.permission_manager.is_admin():
            self.permission_label.config(text="üîì Privil√®ges administrateur", fg='#00ff00')
            self.admin_button.grid_remove()
            self.status_var.set("‚èπÔ∏è Arr√™t√© - Pr√™t √† d√©marrer")
        else:
            self.permission_label.config(text="üîí Privil√®ges limit√©s", fg='#ff4444')
            self.admin_button.grid()
            self.status_var.set("‚ö†Ô∏è Privil√®ges insuffisants - Capture limit√©e")
    
    def restart_with_privileges(self):
        """Red√©marrer avec des privil√®ges administrateur"""
        success, error = self.permission_manager.restart_as_admin()
        if not success:
            messagebox.showerror("Erreur", f"Impossible de red√©marrer: {error}")
    
    def test_permissions(self):
        """Tester les permissions de capture"""
        self.log_message("üß™ Test des permissions...", "info")
        
        # Test 1: Privil√®ges administrateur
        if self.permission_manager.is_admin():
            self.log_message("‚úÖ Test 1: Privil√®ges administrateur - OK", "success")
        else:
            self.log_message("‚ùå Test 1: Privil√®ges administrateur - √âCHEC", "error")
        
        # Test 2: Raw sockets
        if self.permission_manager.check_raw_socket_permission():
            self.log_message("‚úÖ Test 2: Acc√®s raw sockets - OK", "success")
        else:
            self.log_message("‚ùå Test 2: Acc√®s raw sockets - √âCHEC", "error")
        
        # Test 3: Scapy
        if SCAPY_AVAILABLE:
            self.log_message("‚úÖ Test 3: Scapy disponible - OK", "success")
        else:
            self.log_message("‚ùå Test 3: Scapy disponible - √âCHEC", "error")
        
        # Test 4: Interfaces r√©seau
        try:
            interfaces = get_if_list() if SCAPY_AVAILABLE else []
            if interfaces:
                self.log_message(f"‚úÖ Test 4: Interfaces r√©seau ({len(interfaces)} trouv√©es) - OK", "success")
            else:
                self.log_message("‚ùå Test 4: Aucune interface r√©seau trouv√©e - √âCHEC", "error")
        except Exception as e:
            self.log_message(f"‚ùå Test 4: Erreur interfaces - {e}", "error")
        
        # Recommandations
        self.log_message("üìã Recommandations:", "info")
        if not self.permission_manager.is_admin():
            if platform.system() == "Windows":
                self.log_message("  ‚Ä¢ Red√©marrer en tant qu'administrateur", "info")
            else:
                self.log_message("  ‚Ä¢ Utiliser sudo ou configurer setcap", "info")
        
        if not SCAPY_AVAILABLE:
            self.log_message("  ‚Ä¢ Installer Scapy: pip install scapy", "info")
    
    def load_interfaces(self):
        """Charger les interfaces r√©seau disponibles"""
        try:
            if not SCAPY_AVAILABLE:
                self.log_message("‚ùå Scapy non disponible pour lister les interfaces", "error")
                return
                
            interfaces = get_if_list()
            self.interface_combo['values'] = interfaces
            if interfaces:
                self.interface_combo.current(0)
                self.selected_interface.set(interfaces[0])
                self.log_message(f"‚úÖ {len(interfaces)} interfaces charg√©es", "success")
            else:
                self.log_message("‚ö†Ô∏è Aucune interface r√©seau trouv√©e", "warning")
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors du chargement des interfaces: {e}", "error")
    
    def validate_ip(self, ip):
        """Valider une adresse IP"""
        pattern = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
        if not re.match(pattern, ip):
            return False
        return all(0 <= int(octet) <= 255 for octet in ip.split("."))
    
    def validate_gateway_ip(self):
        """Valider l'adresse IP de la gateway"""
        ip = self.gateway_ip.get().strip()
        if self.validate_ip(ip):
            messagebox.showinfo("‚úÖ Validation", f"Adresse IP {ip} valide!")
            self.log_message(f"‚úÖ Gateway IP valid√©e: {ip}", "success")
        else:
            messagebox.showerror("‚ùå Erreur", "Adresse IP invalide!\nFormat attendu: xxx.xxx.xxx.xxx")
            
    def log_message(self, message, msg_type="info"):
        """Ajouter un message aux logs"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        formatted_msg = f"[{timestamp}] {message}\n"
        
        # Ajouter √† la queue pour traitement thread-safe
        self.message_queue.put(('log', formatted_msg, msg_type))
        
    def log_option50(self, message):
        """Ajouter un message sp√©cifiquement pour l'option 50"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        formatted_msg = f"[{timestamp}] {message}\n"
        self.message_queue.put(('option50', formatted_msg))
        
    def update_stats(self, packet_info):
        """Mettre √† jour les statistiques"""
        self.message_queue.put(('stats', packet_info))
        
    def check_queue(self):
        """V√©rifier la queue des messages de mani√®re thread-safe"""
        try:
            while True:
                msg_type, message, *args = self.message_queue.get_nowait()
                
                if msg_type == 'log':
                    self.log_text.insert(tk.END, message)
                    self.log_text.see(tk.END)
                    
                elif msg_type == 'option50':
                    self.option50_text.insert(tk.END, message)
                    self.option50_text.see(tk.END)
                    
                elif msg_type == 'stats':
                    self.process_stats(args[0])
                    
        except queue.Empty:
            pass
        
        # Programmer la prochaine v√©rification
        self.root.after(100, self.check_queue)
        
    def process_stats(self, packet_info):
        """Traiter les statistiques des paquets"""
        self.stats['total_packets'] += 1
        
        if 'option50' in packet_info:
            self.stats['option50_packets'] += 1
            
        if 'msg_type' in packet_info:
            msg_type = packet_info['msg_type']
            self.stats['dhcp_types'][msg_type] = self.stats['dhcp_types'].get(msg_type, 0) + 1
            
        if packet_info.get('is_gateway', False):
            self.stats['gateway_packets'] += 1
            
        self.update_stats_display()
        
    def update_stats_display(self):
        """Mettre √† jour l'affichage des statistiques"""
        stats_text = f"""üìä STATISTIQUES DE CAPTURE
{'='*50}
üî¢ Total paquets captur√©s: {self.stats['total_packets']}
üéØ Paquets avec Option 50: {self.stats['option50_packets']}
üåê Paquets Gateway: {self.stats['gateway_packets']}

üìã Types de messages DHCP:
"""
        
        dhcp_types = {
            1: "DISCOVER", 2: "OFFER", 3: "REQUEST", 4: "DECLINE",
            5: "ACK", 6: "NACK", 7: "RELEASE", 8: "INFORM"
        }
        
        for msg_type, count in self.stats['dhcp_types'].items():
            type_name = dhcp_types.get(msg_type, f"TYPE_{msg_type}")
            stats_text += f"  ‚Ä¢ {type_name}: {count}\n"
            
        self.stats_text.delete(1.0, tk.END)
        self.stats_text.insert(tk.END, stats_text)
        
    def parse_dhcp_options(self, options):
        """Parser les options DHCP"""
        parsed = {}
        for option in options:
            if isinstance(option, tuple) and len(option) == 2:
                opt_code, opt_value = option
                if opt_code == "message-type":
                    parsed['msg_type'] = opt_value
                elif opt_code == "requested_addr":
                    parsed['requested_ip'] = opt_value
                elif opt_code == "server_id":
                    parsed['server_id'] = opt_value
                elif opt_code == "hostname":
                    parsed['hostname'] = opt_value
        return parsed
        
    def get_dhcp_message_type(self, msg_type):
        """Convertir le type de message DHCP"""
        types = {
            1: "DISCOVER", 2: "OFFER", 3: "REQUEST", 4: "DECLINE",
            5: "ACK", 6: "NACK", 7: "RELEASE", 8: "INFORM"
        }
        return types.get(msg_type, f"TYPE_{msg_type}")
        
    def dhcp_packet_handler(self, packet):
        """Gestionnaire de paquets DHCP"""
        try:
            if packet.haslayer(DHCP) and packet.haslayer(IP) and packet.haslayer(UDP):
                src_ip = packet[IP].src
                dst_ip = packet[IP].dst
                src_port = packet[UDP].sport
                dst_port = packet[UDP].dport
                mac_src = packet[Ether].src if packet.haslayer(Ether) else "Unknown"
                
                dhcp_options = self.parse_dhcp_options(packet[DHCP].options)
                
                # Informations du paquet pour les stats
                packet_info = {
                    'src_ip': src_ip,
                    'dst_ip': dst_ip,
                    'is_gateway': src_ip == self.gateway_ip.get() or dst_ip == self.gateway_ip.get()
                }
                
                # Log principal
                log_msg = f"BOOTP/DHCP Packet: {src_ip}:{src_port} ‚Üí {dst_ip}:{dst_port}"
                self.log_message(log_msg)
                self.log_message(f"  ‚îî‚îÄ MAC: {mac_src}")
                
                if 'msg_type' in dhcp_options:
                    msg_type_str = self.get_dhcp_message_type(dhcp_options['msg_type'])
                    self.log_message(f"  ‚îî‚îÄ Message Type: {msg_type_str} ({dhcp_options['msg_type']})")
                    packet_info['msg_type'] = dhcp_options['msg_type']
                    
                    # Focus sur l'option 50
                    if 'requested_ip' in dhcp_options:
                        requested_ip = dhcp_options['requested_ip']
                        option50_msg = f"üéØ Option 50 - Requested IP: {requested_ip}"
                        self.log_message(f"  ‚îî‚îÄ {option50_msg}")
                        self.log_option50(f"{option50_msg} | {src_ip} ‚Üí {dst_ip} | {msg_type_str}")
                        packet_info['option50'] = requested_ip
                        
                        # V√©rification gateway
                        if packet_info['is_gateway']:
                            self.log_message("  ‚îî‚îÄ üåê GATEWAY ACTIVITY DETECTED!", "success")
                            
                    # Autres informations
                    if 'server_id' in dhcp_options:
                        self.log_message(f"  ‚îî‚îÄ Server ID: {dhcp_options['server_id']}")
                    if 'hostname' in dhcp_options:
                        self.log_message(f"  ‚îî‚îÄ Hostname: {dhcp_options['hostname']}")
                        
                # Mettre √† jour les statistiques
                self.update_stats(packet_info)
                
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors du traitement du paquet: {e}", "error")
            
    def start_monitoring(self):
        """D√©marrer la surveillance DHCP avec gestion d'erreurs am√©lior√©e"""
        if not SCAPY_AVAILABLE:
            messagebox.showerror("Erreur", "Scapy n'est pas disponible!")
            return
            
        gateway = self.gateway_ip.get().strip()
        if not self.validate_ip(gateway):
            messagebox.showerror("Erreur", "Veuillez entrer une adresse IP de gateway valide!")
            return
            
        interface = self.selected_interface.get()
        if not interface:
            messagebox.showerror("Erreur", "Veuillez s√©lectionner une interface r√©seau!")
            return
        
        # V√©rification des permissions avant de commencer
        if not self.permission_manager.is_admin():
            result = messagebox.askyesno("Permissions insuffisantes", 
                                       "Vous n'avez pas les privil√®ges administrateur.\n"
                                       "La capture peut √©chouer.\n\n"
                                       "Continuer quand m√™me?")
            if not result:
                return
            
        self.is_monitoring = True
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.status_var.set("üîÑ Capture en cours...")
        
        self.log_message("üöÄ D√©marrage de la capture DHCP", "success")
        self.log_message(f"üåê Gateway: {gateway}")
        self.log_message(f"üîó Interface: {interface}")
        self.log_message("üéØ Surveillance des requ√™tes avec option 50 activ√©e")
        
        # R√©initialiser les statistiques
        self.stats = {'total_packets': 0, 'option50_packets': 0, 'dhcp_types': {}, 'gateway_packets': 0}
        
        # D√©marrer le thread de capture
        self.sniff_thread = threading.Thread(target=self.sniff_packets, args=(interface,))
        self.sniff_thread.daemon = True
        self.sniff_thread.start()
        
    def sniff_packets(self, interface):
        """Thread de capture des paquets avec gestion d'erreurs renforc√©e"""
        try:
            self.log_message(f"üîç D√©but de la capture sur {interface}...", "info")
            
            # Configuration de Scapy pour √©viter certains probl√®mes
            conf.use_pcap = True  # Forcer l'utilisation de pcap si disponible
            
            sniff(filter="udp and (port 67 or port 68)",
                  prn=self.dhcp_packet_handler,
                  store=0,
                  iface=interface,
                  stop_filter=lambda x: not self.is_monitoring,
                  timeout=1)  # Timeout pour √©viter le blocage
                  
        except PermissionError as e:
            self.log_message(f"‚ùå Erreur de permissions: {e}", "error")
            self.log_message("üí° Solution: Red√©marrer en tant qu'administrateur", "info")
            self.message_queue.put(('permission_error', str(e)))
        except OSError as e:
            self.log_message(f"‚ùå Erreur syst√®me: {e}", "error")
            if "Operation not permitted" in str(e):
                self.log_message("üí° V√©rifiez les privil√®ges administrateur", "info")
            elif "No such device" in str(e):
                self.log_message("üí° Interface r√©seau introuvable", "info")
            self.message_queue.put(('os_error', str(e)))
        except Exception as e:
            self.log_message(f"‚ùå Erreur de capture: {e}", "error")
            self.log_message(f"üìù Type d'erreur: {type(e).__name__}", "info")
        finally:
            if self.is_monitoring:
                self.message_queue.put(('capture_ended', "Capture termin√©e de mani√®re inattendue"))
            
    def stop_monitoring(self):
        """Arr√™ter la surveillance"""
        self.is_monitoring = False
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        self.status_var.set("‚èπÔ∏è Arr√™t√©")
        self.log_message("üõë Capture arr√™t√©e", "info")
        
    def clear_logs(self):
        """Effacer tous les logs"""
        self.log_text.delete(1.0, tk.END)
        self.option50_text.delete(1.0, tk.END)
        self.stats_text.delete(1.0, tk.END)
        self.stats = {'total_packets': 0, 'option50_packets': 0, 'dhcp_types': {}, 'gateway_packets': 0}
        self.log_message("üóëÔ∏è Logs effac√©s", "info")

class SetupWizard:
    """Assistant de configuration pour r√©soudre les probl√®mes de permissions"""
    
    def __init__(self, parent):
        self.parent = parent
        self.window = None
        
    def show_setup_wizard(self):
        """Afficher l'assistant de configuration"""
        self.window = tk.Toplevel(self.parent)
        self.window.title("üîß Assistant de Configuration")
        self.window.geometry("600x500")
        self.window.configure(bg='#2b2b2b')
        self.window.transient(self.parent)
        self.window.grab_set()
        
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        
        # Titre
        title = tk.Label(main_frame, text="üîß Assistant de Configuration DHCP Monitor",
                        font=('Arial', 14, 'bold'), bg='#2b2b2b', fg='#ffffff')
        title.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Diagnostic automatique
        diag_frame = ttk.LabelFrame(main_frame, text="Diagnostic", padding="10")
        diag_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)
        
        self.diag_text = scrolledtext.ScrolledText(diag_frame, height=8, width=70,
                                                  bg='#1e1e1e', fg='#ffffff',
                                                  font=('Consolas', 9))
        self.diag_text.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        # Boutons d'action
        action_frame = ttk.LabelFrame(main_frame, text="Actions", padding="10")
        action_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)
        
        if platform.system() == "Windows":
            ttk.Button(action_frame, text="üîë Red√©marrer en Administrateur",
                      command=self.restart_as_admin).grid(row=0, column=0, padx=5, pady=5)
            ttk.Button(action_frame, text="üìñ Guide Windows",
                      command=self.show_windows_guide).grid(row=0, column=1, padx=5, pady=5)
        else:
            ttk.Button(action_frame, text="üîë Utiliser sudo",
                      command=self.restart_with_sudo).grid(row=0, column=0, padx=5, pady=5)
            ttk.Button(action_frame, text="‚öôÔ∏è Configurer setcap",
                      command=self.setup_setcap).grid(row=0, column=1, padx=5, pady=5)
            ttk.Button(action_frame, text="üìñ Guide Linux",
                      command=self.show_linux_guide).grid(row=0, column=2, padx=5, pady=5)
        
        ttk.Button(action_frame, text="üß™ Tester Configuration",
                  command=self.test_configuration).grid(row=1, column=0, padx=5, pady=5)
        ttk.Button(action_frame, text="‚ùå Fermer",
                  command=self.window.destroy).grid(row=1, column=1, padx=5, pady=5)
        
        # Lancer le diagnostic automatique
        self.run_diagnosis()
        
    def run_diagnosis(self):
        """Ex√©cuter un diagnostic complet"""
        self.diag_text.delete(1.0, tk.END)
        self.diag_text.insert(tk.END, "üîç Diagnostic en cours...\n\n")
        
        # V√©rifications
        checks = [
            ("Syst√®me d'exploitation", self.check_os),
            ("Privil√®ges administrateur", self.check_admin),
            ("Installation Scapy", self.check_scapy),
            ("Acc√®s raw sockets", self.check_raw_sockets),
            ("Interfaces r√©seau", self.check_interfaces)
        ]
        
        for check_name, check_func in checks:
            result, message = check_func()
            status = "‚úÖ" if result else "‚ùå"
            self.diag_text.insert(tk.END, f"{status} {check_name}: {message}\n")
            
        self.diag_text.insert(tk.END, "\nüìã Recommandations:\n")
        self.diag_text.insert(tk.END, self.get_recommendations())
        
    def check_os(self):
        """V√©rifier le syst√®me d'exploitation"""
        os_name = platform.system()
        version = platform.release()
        return True, f"{os_name} {version}"
        
    def check_admin(self):
        """V√©rifier les privil√®ges administrateur"""
        is_admin = PermissionManager.is_admin()
        if is_admin:
            return True, "Privil√®ges administrateur d√©tect√©s"
        else:
            return False, "Privil√®ges administrateur requis"
            
    def check_scapy(self):
        """V√©rifier l'installation de Scapy"""
        if SCAPY_AVAILABLE:
            try:
                from scapy import VERSION
                return True, f"Scapy {VERSION} install√©"
            except:
                return True, "Scapy install√©"
        else:
            return False, "Scapy non install√© (pip install scapy)"
            
    def check_raw_sockets(self):
        """V√©rifier l'acc√®s aux raw sockets"""
        can_access = PermissionManager.check_raw_socket_permission()
        if can_access:
            return True, "Acc√®s raw sockets disponible"
        else:
            return False, "Acc√®s raw sockets refus√©"
            
    def check_interfaces(self):
        """V√©rifier les interfaces r√©seau"""
        try:
            if SCAPY_AVAILABLE:
                interfaces = get_if_list()
                return True, f"{len(interfaces)} interfaces trouv√©es"
            else:
                return False, "Impossible de lister (Scapy requis)"
        except Exception as e:
            return False, f"Erreur: {str(e)}"
            
    def get_recommendations(self):
        """Obtenir les recommandations bas√©es sur le diagnostic"""
        recommendations = []
        
        if not PermissionManager.is_admin():
            if platform.system() == "Windows":
                recommendations.append("‚Ä¢ Clic droit sur l'application ‚Üí 'Ex√©cuter en tant qu'administrateur'")
            else:
                recommendations.append("‚Ä¢ Utiliser 'sudo python3 script.py' ou configurer setcap")
                
        if not SCAPY_AVAILABLE:
            recommendations.append("‚Ä¢ Installer Scapy: pip install scapy")
            
        if not PermissionManager.check_raw_socket_permission():
            recommendations.append("‚Ä¢ V√©rifier les permissions r√©seau")
            
        if not recommendations:
            recommendations.append("‚Ä¢ Configuration semble correcte!")
            
        return "\n".join(recommendations)
        
    def restart_as_admin(self):
        """Red√©marrer en tant qu'administrateur"""
        PermissionManager.restart_as_admin()
        
    def restart_with_sudo(self):
        """Red√©marrer avec sudo"""
        PermissionManager.restart_as_admin()
        
    def setup_setcap(self):
        """Configurer setcap pour Linux"""
        success, message = PermissionManager.setup_linux_permissions()
        messagebox.showinfo("Configuration setcap", message)
        
    def show_windows_guide(self):
        """Afficher le guide Windows"""
        guide = """Guide Windows - Capture r√©seau avec privil√®ges

1. M√©thode recommand√©e:
   ‚Ä¢ Clic droit sur l'application Python
   ‚Ä¢ S√©lectionner "Ex√©cuter en tant qu'administrateur"

2. Alternative - Invite de commandes:
   ‚Ä¢ Ouvrir "cmd" en tant qu'administrateur
   ‚Ä¢ Naviguer vers le dossier du script
   ‚Ä¢ Ex√©cuter: python dhcp_monitor.py

3. Troubleshooting:
   ‚Ä¢ V√©rifier que Python est dans le PATH
   ‚Ä¢ Installer Scapy: pip install scapy
   ‚Ä¢ D√©sactiver temporairement l'antivirus si n√©cessaire

4. Permissions requises:
   ‚Ä¢ Capture de paquets r√©seau
   ‚Ä¢ Acc√®s aux interfaces r√©seau
   ‚Ä¢ Lecture des configurations r√©seau"""
        
        messagebox.showinfo("Guide Windows", guide)
        
    def show_linux_guide(self):
        """Afficher le guide Linux"""
        guide = """Guide Linux - Capture r√©seau avec privil√®ges

1. M√©thode sudo (simple):
   sudo python3 dhcp_monitor.py

2. M√©thode setcap (recommand√©e):
   sudo setcap cap_net_raw,cap_net_admin+eip /usr/bin/python3
   
3. Alternative - Groupe netdev:
   sudo usermod -a -G netdev $USER
   (red√©marrage requis)

4. V√©rification des permissions:
   getcap /usr/bin/python3

5. Troubleshooting:
   ‚Ä¢ Installer Scapy: pip3 install scapy
   ‚Ä¢ V√©rifier les interfaces: ip link show
   ‚Ä¢ Logs syst√®me: journalctl -f"""
        
        messagebox.showinfo("Guide Linux", guide)
        
    def test_configuration(self):
        """Tester la configuration actuelle"""
        self.run_diagnosis()

def main():
    """Fonction principale avec gestion compl√®te des erreurs"""
    
    # Cr√©er la fen√™tre principale
    root = tk.Tk()
    
    # Cr√©er l'application
    app = DHCPMonitorGUI(root)
    
    # Ajouter le menu
    menubar = tk.Menu(root)
    root.config(menu=menubar)
    
    # Menu Aide
    help_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Aide", menu=help_menu)
    help_menu.add_command(label="üîß Assistant de Configuration", 
                         command=lambda: SetupWizard(root).show_setup_wizard())
    help_menu.add_separator()
    help_menu.add_command(label="üìñ √Ä propos", command=show_about)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        app.stop_monitoring()
    except Exception as e:
        messagebox.showerror("Erreur critique", f"Erreur inattendue: {e}")

def show_about():
    """Afficher les informations sur l'application"""
    about_text = """üîç DHCP Monitor - Option 50 Tracker

Version: 2.0 (avec gestion des permissions)
Auteur: Assistant IA
Licence: Open Source

Fonctionnalit√©s:
‚Ä¢ Capture en temps r√©el des paquets DHCP
‚Ä¢ Surveillance sp√©cifique de l'option 50
‚Ä¢ Interface graphique moderne
‚Ä¢ Gestion avanc√©e des permissions
‚Ä¢ Statistiques d√©taill√©es
‚Ä¢ Multi-plateforme (Windows/Linux)

Permissions requises:
‚Ä¢ Capture de paquets r√©seau (raw sockets)
‚Ä¢ Acc√®s aux interfaces r√©seau
‚Ä¢ Privil√®ges administrateur/root

Support:
‚Ä¢ Windows: Ex√©cuter en tant qu'administrateur
‚Ä¢ Linux: sudo ou configuration setcap"""
    
    messagebox.showinfo("√Ä propos", about_text)

if __name__ == "__main__":
    main()
